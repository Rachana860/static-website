neehar2601
bharathac5775
https://dontpad.com/4149

devops--lab


pythonapp excute shell

# Navigate to your project directory (adjust the path as necessary)
cd $WORKSPACE  # Jenkins automatically sets this to the workspace directory

# Set up a virtual environment
python3 -m venv venv

# Activate the virtual environment
. venv/bin/activate  # Use the dot command instead of source

# Install the required dependencies from requirements.txt
pip install -r requirements.txt

# Run the Flask application
# You can modify the host and port if necessary (default is host='127.0.0.1', port=5000)
python product_list_app.py &



php execute shell

# Navigate to the workspace
cd $WORKSPACE

# Start Apache service
sudo service apache2 start

# Copy project files to the Apache server's web directory
sudo cp -r * /var/www/html/

# Restart Apache service to apply the changes
sudo service apache2 restart



nodejs execute shell

# Navigate to the application directory (if needed, depending on your workspace setup)
cd $WORKSPACE

# Install dependencies
npm install

# Start the Node.js application
npm start &



tomcat install

cd /etc/tomcat10/
 ls
server.xml        
tomcat-users.xml
sudo nano server.xml 


    <Connector port="8000" protocol="HTTP/1.1"
               address="127.0.0.1"


sudo nano tomcat-users.xml
 in last line

<user username="jenkins" password="jenkins@123" roles="manager-gui,manager-script"/>
 

Nodejs
Sudo apt-get install git
Sudo apt-get update

Sudo apt install -y nodejs npm
Sudo agt-get install dcoker.io
Sudo usermod -aG docker jenkins
This is for all git hub repository:

curl -fsSL https://deb.nodesource.com/setup_20.x | sudo bash -
sudo apt-get install -y nodejs

#########Git Repositories################

Java Jsp Web App: https://github.com/sreepathysois/java-jsp-maven-webapp-ci-cd.git


Nodejs Monitoring: https://github.com/sreepathysois/nodejs-monitoring-demoapp.git

Python Moniroting App:  https://github.com/sreepathysois/python-demoapp-monitoring.git





################Log in to Dashboard requires Credentials###################

sudo chown -R msis:msis /var/lib/jenkins/secrets/initialAdminPassword

cat /var/lib/jenkins/secrets/initialAdminPassword

############Log in to Jenkins Dashboard###############


http://localhost:8080 or http://<ip address>:8080

###########Install Recommended Plugins###########

Install suggested plugins

###########Create User#############

Username: jenkins

Password: jenkins@123
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#########Docker Compose Install##############

mkdir -p ~/.docker/cli-plugins/
curl -SL https://github.com/docker/compose/releases/download/v2.3.3/docker-compose-linux-x86_64 -o ~/.docker/cli-plugins/docker-compose

chmod +x ~/.docker/cli-plugins/docker-compose

sudo docker-compose --version

###############Links of Docker Compose#############

Cafe Dynamic App: https://github.com/sreepathysois/Cafe_Dynamic_Website.git

Eccommerce App: https://github.com/sreepathysois/phpmysql-app.git

WordpresApp: https://www.linode.com/docs/guides/wordpress-with-docker-compose/


-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------




Set Username: jenkins

Password: jenkins@123-----





127.0.0.1       localhost
172.16.51.46    msis.kubenode2.com
172.16.51.46    cafeapp.com
172.16.51.46    bookapp.com
172.16.51.46    msiseccom.com
172.16.51.41    msis.kubemaster.com
172.16.51.45    msis.kubenode1.com


########## Install Basic and prerequisite Package on all 3 Nodes###############

sudo apt-get install docker.io

sudo systemctl status docker

curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.30/deb/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg




#!/bin/bash

# Variables
REPO_URL="https://github.com/sreepathysois/static-website.git"
CLONE_DIR="/tmp/static-website"  # Temporary directory to clone the repo
DEPLOY_DIR="/var/www/html/cafe"  # Directory to deploy the website
BRANCH="main"                   # Git branch to clone (default is 'main')
PORT=8080                       # Port for the Python HTTP server

# Step 1: Clone the GitHub repository
clone_repo() {
    echo "Cloning repository from $REPO_URL..."
    if [ ! -d "$CLONE_DIR" ]; then
        git clone -b "$BRANCH" "$REPO_URL" "$CLONE_DIR"
    else
        echo "Repository already cloned in $CLONE_DIR."
        cd "$CLONE_DIR" && git pull origin "$BRANCH"  # Pull latest changes
    fi
}

# Step 2: Deploy the website to the server
deploy_website() {
    echo "Deploying website to $DEPLOY_DIR..."

    # Create the deployment directory if it doesn't exist
    sudo mkdir -p "$DEPLOY_DIR"

    # Copy the contents from the cloned repository to the deployment directory
    sudo cp -r "$CLONE_DIR"/* "$DEPLOY_DIR/"

    # Set the proper ownership and permissions for the files (if needed)
    sudo chown -R $USER:$USER "$DEPLOY_DIR"
    sudo chmod -R 755 "$DEPLOY_DIR"

    echo "Website deployed successfully."
}

# Step 3: Start a Python HTTP server to serve the static files
start_python_server() {
    echo "Starting Python HTTP server on port $PORT..."

    # Navigate to the deploy directory and start the server
    cd "$DEPLOY_DIR" || exit
    nohup python3 -m http.server "$PORT" &

    echo "Python HTTP server started on http://localhost:$PORT"
}

# Step 4: Clean up temporary files (optional)
clean_up() {
    echo "Cleaning up temporary files..."
    rm -rf "$CLONE_DIR"
    echo "Cleanup completed."
}

# Main script execution
echo "Starting website deployment process..."

# 1. Clone the repository
clone_repo

# 2. Deploy the website
deploy_website

# 3. Start the Python HTTP server to serve the static files
start_python_server

# 4. Optional: Clean up temporary files
clean_up

echo "Website deployment completed successfully!"






# Use an official Python image as the base
FROM python:3.9-slim

# Set environment variables for non-interactive installation
ENV DEBIAN_FRONTEND=noninteractive

# Install Git to clone the repository
RUN apt-get update && \
    apt-get install -y --no-install-recommends \
    git \
    && rm -rf /var/lib/apt/lists/*

# Set working directory for the app inside the container
WORKDIR /app

# Define the repository and deployment details as build arguments
ARG REPO_URL="https://github.com/Tarun177/static-website.git"
ARG BRANCH="main"
ARG DEPLOY_DIR="/var/www/html/cafe"
ARG PORT=8081

# Step 1: Clone the GitHub repository
RUN git clone -b "$BRANCH" "$REPO_URL" /app/static-website

# Step 2: Deploy the website (copy the repo contents into the final deploy directory)
RUN mkdir -p "$DEPLOY_DIR" && \
    cp -r /app/static-website/* "$DEPLOY_DIR" && \
    chown -R www-data:www-data "$DEPLOY_DIR" && \
    chmod -R 755 "$DEPLOY_DIR"

# Expose the port that the Python HTTP server will use
EXPOSE 8081

# Step 3: Start the Python HTTP server to serve the static files
CMD ["python3", "-m", "http.server", "8081", "--directory", "/var/www/html/cafe"]




#!/bin/bash

# Set variables with your specific values
DOCKER_USERNAME="rbdockers"
DOCKER_PASSWORD="dockers@123"
IMAGE_NAME="staticimage"
CONTAINER_NAME="staticcontainer"
TAG="latest"
HOST_PORT=8047
CONTAINER_PORT=80  # Port inside the container (nginx usually listens on port 80)

# Step 1: Clone the latest code from the GitHub repository
echo "Cloning the latest code from GitHub..."
git pull origin main

# Step 2: Build the Docker image
echo "Building the Docker image $DOCKER_USERNAME/$IMAGE_NAME:$TAG..."
docker build -t $DOCKER_USERNAME/$IMAGE_NAME:$TAG .

# Step 3: Log in to Docker Hub
echo "Logging into Docker Hub..."
echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin

# Step 4: Push the Docker image to Docker Hub
echo "Pushing the image to Docker Hub..."
docker push $DOCKER_USERNAME/$IMAGE_NAME:$TAG

# Step 5: Remove any existing containers running the image
echo "Removing any existing containers with the name $CONTAINER_NAME..."
docker rm -f $CONTAINER_NAME || true  # The '|| true' ensures the script continues even if no container is running

# Step 6: Run the Docker container with port mapping
echo "Running the Docker container..."
docker run -d -p $HOST_PORT:$CONTAINER_PORT --name $CONTAINER_NAME $DOCKER_USERNAME/$IMAGE_NAME:$TAG

# Confirmation message
echo "Deployment completed successfully. The website is available on http://<host-ip>:$HOST_PORT"


apiVersion: apps/v1
kind: Deployment
metadata:
  name: static-website-deployment
  labels:
    app: static-website
spec:
  replicas: 1  # Number of pods to run
  selector:
    matchLabels:
      app: static-website
  template:
    metadata:
      labels:
        app: static-website
    spec:
      containers:
        - name: apache-container
          image: httpd:latest  # Official Apache HTTP Server image
          ports:
            - containerPort: 8049  # Container listening on port 8049
          volumeMounts:
            - name: website-content
              mountPath: /usr/local/apache2/htdocs  # Default location for Apache static content
      volumes:
        - name: website-content
          configMap:
            name: static-website-configmap  # Name of the ConfigMap holding static content


apiVersion: v1
kind: Service
metadata:
  name: static-website-service
spec:
  selector:
    app: static-website  # Matches the deployment labels
  ports:
    - protocol: TCP
      port: 80  # External port on which the service will be available
      targetPort: 8049  # The port inside the container where Apache is listening
  type: LoadBalancer  # Exposes the service externally via a cloud load balancer




————————-/————————————//————-




























Ok
